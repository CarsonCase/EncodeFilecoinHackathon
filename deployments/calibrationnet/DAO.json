{
  "address": "0xA30CB26383fe02012bf08B76CeA0cA809819c74D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "contract IDealClient",
          "name": "_dealClient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VotingError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "patron",
          "type": "address"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "fundProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "piece_cid",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "piece_size",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "verified_deal",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "label",
              "type": "string"
            },
            {
              "internalType": "int64",
              "name": "start_epoch",
              "type": "int64"
            },
            {
              "internalType": "int64",
              "name": "end_epoch",
              "type": "int64"
            },
            {
              "internalType": "uint256",
              "name": "storage_price_per_epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "provider_collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "client_collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "extra_params_version",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "location_ref",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "car_size",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "skip_ipni_announce",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "remove_unsealed_copy",
                  "type": "bool"
                }
              ],
              "internalType": "struct ExtraParamsV1",
              "name": "extra_params",
              "type": "tuple"
            }
          ],
          "internalType": "struct DealRequest",
          "name": "dealRequest",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "piece_cid",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "piece_size",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "verified_deal",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "label",
              "type": "string"
            },
            {
              "internalType": "int64",
              "name": "start_epoch",
              "type": "int64"
            },
            {
              "internalType": "int64",
              "name": "end_epoch",
              "type": "int64"
            },
            {
              "internalType": "uint256",
              "name": "storage_price_per_epoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "provider_collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "client_collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "extra_params_version",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "location_ref",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "car_size",
                  "type": "uint64"
                },
                {
                  "internalType": "bool",
                  "name": "skip_ipni_announce",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "remove_unsealed_copy",
                  "type": "bool"
                }
              ],
              "internalType": "struct ExtraParamsV1",
              "name": "extra_params",
              "type": "tuple"
            }
          ],
          "internalType": "struct DealRequest",
          "name": "dealRequest",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountOfVotes",
          "type": "uint256"
        }
      ],
      "name": "submitProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteToken",
      "outputs": [
        {
          "internalType": "contract IVote",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e49f44769da0c6c8313c33c153aaa759ebc321ee4d01fac9f070ef0239e9b3d",
  "receipt": {
    "to": null,
    "from": "0xFF2BEE6fF31B57aCc627E78c32c2e378cED279Da",
    "contractAddress": "0xA30CB26383fe02012bf08B76CeA0cA809819c74D",
    "transactionIndex": 2,
    "gasUsed": "166344495",
    "logsBloom": "0xfffeffffffffffffffffffffffffffffffffffffffffdfffffffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffafffffffffffffffffffffffffffffdffffffdffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffffffffff",
    "blockHash": "0x802b4e4551fbc7353b7293aa0e59e38b3e9cf7fc6cc83bad25a9927492fe2784",
    "transactionHash": "0x2e49f44769da0c6c8313c33c153aaa759ebc321ee4d01fac9f070ef0239e9b3d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 956393,
        "transactionHash": "0x2e49f44769da0c6c8313c33c153aaa759ebc321ee4d01fac9f070ef0239e9b3d",
        "address": "0x85aA5407aF568b5aDC75F883201aE24e5162C599",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a30cb26383fe02012bf08b76cea0ca809819c74d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x802b4e4551fbc7353b7293aa0e59e38b3e9cf7fc6cc83bad25a9927492fe2784"
      }
    ],
    "blockNumber": 956393,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x12638b87555CA6d7C9dd0AdA6c1A6994FE25a55B",
    "0xdA6224c33f5cded5cD9f76e4445E2a1228B6dE63"
  ],
  "numDeployments": 4,
  "solcInputHash": "984fe38af7f2dfc560009447ecc02cef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"contract IDealClient\",\"name\":\"_dealClient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VotingError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"patron\",\"type\":\"address\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"fundProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"piece_cid\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"piece_size\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"verified_deal\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"int64\",\"name\":\"start_epoch\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"end_epoch\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"storage_price_per_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provider_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"client_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"extra_params_version\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"location_ref\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"car_size\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"skip_ipni_announce\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"remove_unsealed_copy\",\"type\":\"bool\"}],\"internalType\":\"struct ExtraParamsV1\",\"name\":\"extra_params\",\"type\":\"tuple\"}],\"internalType\":\"struct DealRequest\",\"name\":\"dealRequest\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"piece_cid\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"piece_size\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"verified_deal\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"int64\",\"name\":\"start_epoch\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"end_epoch\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"storage_price_per_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provider_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"client_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"extra_params_version\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"location_ref\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"car_size\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"skip_ipni_announce\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"remove_unsealed_copy\",\"type\":\"bool\"}],\"internalType\":\"struct ExtraParamsV1\",\"name\":\"extra_params\",\"type\":\"tuple\"}],\"internalType\":\"struct DealRequest\",\"name\":\"dealRequest\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOfVotes\",\"type\":\"uint256\"}],\"name\":\"submitProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteToken\",\"outputs\":[{\"internalType\":\"contract IVote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x5a173dcd1c1f0074e4df6a9cdab3257e17f2e64f7b8f30ca9e17a8c5ea250e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa0ebd2a1608780392e5bc8805079b1a1961ebd73128ee23ab7149e7f6904fa53\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC4626, ERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IDAO} from \\\"./IDAO.sol\\\";\\nimport {Vote, IVote} from \\\"./Vote.sol\\\";\\nimport {IDealClient, DealRequest} from \\\"./IDealClient.sol\\\";\\n\\ncontract DAO is ERC4626, IDAO{\\n    IVote public immutable voteToken;\\n    IDealClient immutable dealClient;\\n    uint public proposalCount;\\n\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    constructor(IERC20 asset_, IDealClient _dealClient) ERC4626(asset_) ERC20(\\\"Contribution Token\\\",\\\"DAO\\\"){\\n        voteToken = IVote(new Vote());\\n        dealClient = _dealClient;\\n    }\\n\\n    error VotingError(uint proposalId, uint amount);\\n\\n    event ProposalSubmitted(uint proposalId, address patron);\\n\\n    function donate(uint amount) external{\\n        IERC20(asset()).transferFrom(msg.sender ,address(this), amount);\\n        voteToken.mint(msg.sender, amount);\\n    }\\n\\n    function submitProposal(DealRequest calldata dealRequest, uint amountOfVotes) external override returns(uint proposalId){\\n        unchecked {\\n            proposalId = ++proposalCount;\\n        }\\n\\n        proposals[proposalId] = Proposal({votes: 0, dealRequest: dealRequest});\\n\\n        if(amountOfVotes > 0){\\n            vote(proposalId, amountOfVotes);\\n        }\\n    }\\n\\n    function vote(uint proposalId, uint amount) public override{\\n        if(amount == 0){\\n            revert VotingError(proposalId, 0);\\n        }\\n        voteToken.burn(msg.sender, amount);\\n        proposals[proposalId].votes += amount;\\n    }\\n\\n    function fundProposal(uint proposalId) external override{\\n        Proposal memory proposal = proposals[proposalId];\\n        delete proposals[proposalId];\\n        \\n        // do the thing\\n        dealClient.makeDealProposal(proposal.dealRequest);\\n\\n        \\n        emit ProposalSubmitted(proposalId, msg.sender);\\n\\n        // mint contributor the number of shares the proposal had\\n        _mint(msg.sender, proposal.votes);\\n    }\\n\\n}\",\"keccak256\":\"0x67eb73c33fbdcb5b745b5ce8a6a6765be5626bb9b881b2e6038c2cc7fd577411\",\"license\":\"MIT\"},\"contracts/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {DealRequest} from \\\"./IDealClient.sol\\\";\\n\\ninterface IDAO is IERC4626{\\n\\n    struct Proposal{\\n        DealRequest dealRequest;\\n        uint votes;\\n    }\\n    function donate(uint amount) external;\\n    \\n    function submitProposal(DealRequest calldata dealRequest, uint amountOfVotes) external returns(uint proposalId);\\n\\n    function vote(uint proposalId, uint amount) external;\\n\\n    function fundProposal(uint proposalId) external;\\n}\",\"keccak256\":\"0xf4daefde3923b919173c1169f08601f272f1013ff01def7976f2879ae2d66ac5\",\"license\":\"MIT\"},\"contracts/IDealClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n    struct RequestId {\\n  bytes32 requestId;\\n  bool valid;\\n}\\n\\nstruct RequestIdx {\\n  uint256 idx;\\n  bool valid;\\n}\\n\\nstruct ProviderSet {\\n  bytes provider;\\n  bool valid;\\n}\\n\\n// User request for this contract to make a deal. This structure is modelled after Filecoin's Deal\\n// Proposal, but leaves out the provider, since any provider can pick up a deal broadcast by this\\n// contract.\\nstruct DealRequest {\\n  bytes piece_cid;\\n  uint64 piece_size;\\n  bool verified_deal;\\n  string label;\\n  int64 start_epoch;\\n  int64 end_epoch;\\n  uint256 storage_price_per_epoch;\\n  uint256 provider_collateral;\\n  uint256 client_collateral;\\n  uint64 extra_params_version;\\n  ExtraParamsV1 extra_params;\\n}\\n\\n// Extra parameters associated with the deal request. These are off-protocol flags that\\n// the storage provider will need.\\nstruct ExtraParamsV1 {\\n  string location_ref;\\n  uint64 car_size;\\n  bool skip_ipni_announce;\\n  bool remove_unsealed_copy;\\n}\\n\\ninterface IDealClient{\\n  function makeDealProposal(\\n    DealRequest calldata deal\\n  ) external returns (bytes32);\\n}\",\"keccak256\":\"0x0b36075cb732b2e3b18519d0155a960fe0e5dc4ba0a7a4aeb07949b044ca65fc\",\"license\":\"MIT\"},\"contracts/IVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVote is IERC20{\\n\\n    function mint(address receiver, uint amount) external;\\n\\n    function burn(address account, uint amount) external;\\n}\\n\",\"keccak256\":\"0x3e93bd683a25bd67d60b65d09840926c8bf72e220fafc8015667209d201d5139\",\"license\":\"MIT\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IVote} from \\\"./IVote.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Vote is IVote, ERC20(\\\"Vote\\\",\\\"VTE\\\"), Ownable{\\n\\n    function mint(address receiver, uint amount) external onlyOwner{\\n        _mint(receiver, amount);\\n    }\\n\\n    function burn(address account, uint amount) external onlyOwner{\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6dbc486e7b664e328ba1377ffe9bb0504ce5a424709ee9ef53457d67987bc2fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620046163803806200461683398101604081905262000035916200025b565b816040518060400160405280601281526020017121b7b73a3934b13aba34b7b7102a37b5b2b760711b8152506040518060400160405280600381526020016244414f60e81b81525081600390816200008e9190620003b1565b5060046200009d8282620003b1565b505050600080620000b4836200012160201b60201c565b9150915081620000c6576012620000c8565b805b60ff1660a05250506001600160a01b0316608052604051620000ea9062000206565b604051809103906000f08015801562000107573d6000803e3d6000fd5b506001600160a01b0390811660c0521660e0525062000522565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b038716916200016a91620004cc565b600060405180830381855afa9150503d8060008114620001a7576040519150601f19603f3d011682016040523d82523d6000602084013e620001ac565b606091505b5091509150818015620001c157506020815110155b15620001f957600081806020019051810190620001df9190620004f5565b905060ff8111620001f7576001969095509350505050565b505b5060009485945092505050565b61125580620033c183390190565b60006001600160a01b0382165b92915050565b6000620002218262000214565b6200023f8162000227565b81146200024b57600080fd5b50565b8051620002218162000234565b60008060408385031215620002735762000273600080fd5b60006200028185856200024e565b925050602062000294858286016200024e565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002df57607f821691505b602082108103620002f457620002f4620002b4565b50919050565b600062000221620003088381565b90565b6200031683620002fa565b81546008840282811b60001990911b908116901990911617825550505050565b6000620003458184846200030b565b505050565b8181101562000369576200036060008262000336565b6001016200034a565b5050565b601f82111562000345576000818152602090206020601f85010481016020851015620003965750805b620003aa6020601f8601048301826200034a565b5050505050565b81516001600160401b03811115620003cd57620003cd6200029e565b620003d98254620002ca565b620003e68282856200036d565b6020601f8311600181146200041d5760008415620004045750858201515b600019600886021c198116600286021786555062000479565b600085815260208120601f198616915b828110156200044f57888501518255602094850194600190920191016200042d565b868310156200046c5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60005b838110156200049e57818101518382015260200162000484565b50506000910152565b6000620004b2825190565b620004c281856020860162000481565b9290920192915050565b6000620004da8284620004a7565b9392505050565b806200023f565b80516200022181620004e1565b6000602082840312156200050c576200050c600080fd5b60006200051a8484620004e8565b949350505050565b60805160a05160c05160e051612e3b6200058660003960006111d50152600081816102dd01528181610ca5015261137501526000610b1401526000818161033e015281816107e6015281816112c801528181611656015261170d0152612e3b6000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c806394bf804d1161012a578063c63d75b6116100bd578063da35c6641161008c578063e210f4b511610071578063e210f4b5146104d8578063ef8b30f71461045d578063f14faf6f146104eb57600080fd5b8063da35c66414610496578063dd62ed3e1461049f57600080fd5b8063c63d75b61461037d578063c6e6f5921461045d578063ce96cb7714610470578063d905777e1461048357600080fd5b8063b384abef116100f9578063b384abef1461040f578063b3d7f6b914610424578063b460af9414610437578063ba0876521461044a57600080fd5b806394bf804d146103ce57806395d89b41146103e1578063a457c2d7146103e9578063a9059cbb146103fc57600080fd5b806318160ddd116101bd578063395093511161018c5780634cdad506116101715780634cdad506146102925780636e553f651461039257806370a08231146103a557600080fd5b8063395093511461036a578063402d267d1461037d57600080fd5b806318160ddd1461030c57806323b872dd14610314578063313ce5671461032757806338d52e0f1461033c57600080fd5b806307a2d13a116101f957806307a2d13a14610292578063095ea7b3146102a55780630a28a477146102c5578063160d66ae146102d857600080fd5b8063013cf08b1461022b57806301e1d1141461025557806306fdde031461026a578063074a46a21461027f575b600080fd5b61023e610239366004611c99565b6104fe565b60405161024c929190611e80565b60405180910390f35b61025d6107b3565b60405161024c9190611ea0565b610272610861565b60405161024c9190611eae565b61025d61028d366004611edb565b6108f3565b61025d6102a0366004611c99565b610ab4565b6102b86102b3366004611f57565b610ac1565b60405161024c9190611f79565b61025d6102d3366004611c99565b610ad9565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405161024c9190611fc9565b60025461025d565b6102b8610322366004611fd7565b610ae6565b61032f610b0c565b60405161024c9190612030565b7f000000000000000000000000000000000000000000000000000000000000000060405161024c9190612047565b6102b8610378366004611f57565b610b38565b61025d61038b366004612055565b5060001990565b61025d6103a0366004612076565b610b77565b61025d6103b3366004612055565b6001600160a01b031660009081526020819052604090205490565b61025d6103dc366004612076565b610ba0565b610272610bba565b6102b86103f7366004611f57565b610bc9565b6102b861040a366004611f57565b610c28565b61042261041d3660046120a9565b610c36565b005b61025d610432366004611c99565b610d3a565b61025d6104453660046120cb565b610d47565b61025d6104583660046120cb565b610d93565b61025d61046b366004611c99565b610dd7565b61025d61047e366004612055565b610de4565b61025d610491366004612055565b610e08565b61025d60055481565b61025d6104ad366004612111565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104226104e6366004611c99565b610e26565b6104226104f9366004611c99565b611298565b6006602052806000526040600020600091509050806000016040518061016001604052908160008201805461053290612149565b80601f016020809104026020016040519081016040528092919081815260200182805461055e90612149565b80156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b5050509183525050600182015467ffffffffffffffff81166020830152600160401b900460ff16151560408201526002820180546060909201916105ee90612149565b80601f016020809104026020016040519081016040528092919081815260200182805461061a90612149565b80156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b50505091835250506003820154600781810b6020840152600160401b909104810b604080840191909152600484015460608401526005840154608080850191909152600685015460a08501529184015467ffffffffffffffff1660c08401528051918201905260088301805460e090930192829082906106e690612149565b80601f016020809104026020016040519081016040528092919081815260200182805461071290612149565b801561075f5780601f106107345761010080835404028352916020019161075f565b820191906000526020600020905b81548152906001019060200180831161074257829003601f168201915b50505091835250506001919091015467ffffffffffffffff8116602083015260ff600160401b82048116151560408401526901000000000000000000909104161515606090910152905250600a9091015482565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061081b903090600401612047565b602060405180830381865afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c919061217a565b905090565b60606003805461087090612149565b80601f016020809104026020016040519081016040528092919081815260200182805461089c90612149565b80156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b5050505050905090565b60058054600101908190556040805180820190915280610912856124b3565b815260006020918201819052838152600690915260409020815180518290819061093c9082612555565b50602082015160018201805460408501511515600160401b0268ffffffffffffffffff1990911667ffffffffffffffff909316929092179190911790556060820151600282019061098d9082612555565b50608082015160038201805460a085015167ffffffffffffffff908116600160401b026fffffffffffffffffffffffffffffffff199092169381169390931717905560c0830151600483015560e0830151600583015561010083015160068301556101208301516007830180549190921667ffffffffffffffff1991909116179055610140820151805160088301908190610a289082612555565b50602082810151600190920180546040850151606090950151151569010000000000000000000269ff00000000000000000019951515600160401b0268ffffffffffffffffff1990921667ffffffffffffffff909516949094171793909316919091179091559390930151600a9092019190915550508115610aae57610aae8183610c36565b92915050565b6000610aae8260006113e1565b600033610acf81858561141b565b5060019392505050565b6000610aae8260016114cf565b600033610af48582856114ff565b610aff858585611561565b60019150505b9392505050565b600061085c817f000000000000000000000000000000000000000000000000000000000000000061262f565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610acf9082908690610b7290879061264c565b61141b565b6000610b87565b60405180910390fd5b6000610b9284610dd7565b9050610b0533848684611651565b600080610bac84610d3a565b9050610b0533848387611651565b60606004805461087090612149565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610c105760405162461bcd60e51b8152600401610b7e906126c3565b610c1d828686840361141b565b506001949350505050565b600033610acf818585611561565b80600003610c75578160006040517fb8420057000000000000000000000000000000000000000000000000000000008152600401610b7e9291906126dc565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90610cdc90339085906004016126f7565b600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b5050506000838152600660205260408120600a018054849350909190610d3190849061264c565b90915550505050565b6000610aae8260016113e1565b6000610d5282610de4565b841115610d715760405162461bcd60e51b8152600401610b7e90612746565b6000610d7c85610ad9565b9050610d8b33858588856116da565b949350505050565b6000610d9e82610e08565b841115610dbd5760405162461bcd60e51b8152600401610b7e9061278a565b6000610dc885610ab4565b9050610d8b33858584896116da565b6000610aae8260006114cf565b6001600160a01b038116600090815260208190526040812054610aae9060006113e1565b6001600160a01b038116600090815260208190526040812054610aae565b60008181526006602052604080822081516101a08101835281549092839190820190839082908290610e5790612149565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8390612149565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b5050509183525050600182015467ffffffffffffffff81166020830152600160401b900460ff1615156040820152600282018054606090920191610f1390612149565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3f90612149565b8015610f8c5780601f10610f6157610100808354040283529160200191610f8c565b820191906000526020600020905b815481529060010190602001808311610f6f57829003601f168201915b50505091835250506003820154600781810b6020840152600160401b909104810b604080840191909152600484015460608401526005840154608080850191909152600685015460a08501529184015467ffffffffffffffff1660c08401528051918201905260088301805460e0909301928290829061100b90612149565b80601f016020809104026020016040519081016040528092919081815260200182805461103790612149565b80156110845780601f1061105957610100808354040283529160200191611084565b820191906000526020600020905b81548152906001019060200180831161106757829003601f168201915b50505091835250506001919091015467ffffffffffffffff811660208084019190915260ff600160401b830481161515604080860191909152690100000000000000000090930416151560609093019290925291909252928452600a949094015492840192909252600086815260069093528220929350829050816111098282611c2b565b60018201805468ffffffffffffffffff1916905561112b600283016000611c2b565b6003820180546fffffffffffffffffffffffffffffffff19169055600060048301819055600583018190556006830181905560078301805467ffffffffffffffff19169055600883019061117f8282611c2b565b50600101805469ffffffffffffffffffff1916905550506000600a92909201919091555080516040517fdd27fe900000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163dd27fe9091611209919060040161279a565b6020604051808303816000875af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c919061217a565b507f11641d364e926d2bf231c2d36f2a9271390042d717ea334a3e7c983c27a12391823360405161127e9291906127ab565b60405180910390a1611294338260200151611791565b5050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611301903390309086906004016127c6565b6020604051808303816000875af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134491906127f9565b506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906113ac90339085906004016126f7565b600060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b5050505050565b6000610b056113ee6107b3565b6113f990600161264c565b6114056000600a612928565b600254611412919061264c565b85919085611827565b6001600160a01b0383166114415760405162461bcd60e51b8152600401610b7e90612997565b6001600160a01b0382166114675760405162461bcd60e51b8152600401610b7e90612a01565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906114c2908590611ea0565b60405180910390a3505050565b6000610b056114df82600a612928565b6002546114ec919061264c565b6114f46107b3565b61141290600161264c565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461155b578181101561154e5760405162461bcd60e51b8152600401610b7e90612a45565b61155b848484840361141b565b50505050565b6001600160a01b0383166115875760405162461bcd60e51b8152600401610b7e90612aaf565b6001600160a01b0382166115ad5760405162461bcd60e51b8152600401610b7e90612b19565b6001600160a01b038316600090815260208190526040902054818110156115e65760405162461bcd60e51b8152600401610b7e90612b83565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611644908690611ea0565b60405180910390a361155b565b61167d7f0000000000000000000000000000000000000000000000000000000000000000853085611889565b6116878382611791565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516116cc929190612b93565b60405180910390a350505050565b826001600160a01b0316856001600160a01b0316146116fe576116fe8386836114ff565b611708838261190e565b6117337f000000000000000000000000000000000000000000000000000000000000000085846119c5565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051611782929190612b93565b60405180910390a45050505050565b6001600160a01b0382166117b75760405162461bcd60e51b8152600401610b7e90612bd5565b80600260008282546117c9919061264c565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061181b908590611ea0565b60405180910390a35050565b6000806118358686866119e4565b9050600183600281111561184b5761184b612be5565b14801561186857506000848061186357611863612bfb565b868809115b1561187b5761187860018261264c565b90505b95945050505050565b505050565b61155b846323b872dd60e01b8585856040516024016118aa939291906127c6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611aa6565b6001600160a01b0382166119345760405162461bcd60e51b8152600401610b7e90612c6b565b6001600160a01b0382166000908152602081905260409020548181101561196d5760405162461bcd60e51b8152600401610b7e90612cd5565b6001600160a01b0383166000818152602081905260408082208585039055600280548690039055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114c2908690611ea0565b6118848363a9059cbb60e01b84846040516024016118aa9291906126f7565b6000808060001985870985870292508281108382030391505080600003611a1e57838281611a1457611a14612bfb565b0492505050610b05565b808411611a3d5760405162461bcd60e51b8152600401610b7e90612d19565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611afb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b389092919063ffffffff16565b9050805160001480611b1c575080806020019051810190611b1c91906127f9565b6118845760405162461bcd60e51b8152600401610b7e90612d83565b6060610d8b848460008585600080866001600160a01b03168587604051611b5f9190612db5565b60006040518083038185875af1925050503d8060008114611b9c576040519150601f19603f3d011682016040523d82523d6000602084013e611ba1565b606091505b5091509150611bb287838387611bbd565b979650505050505050565b60608315611bfc578251600003611bf5576001600160a01b0385163b611bf55760405162461bcd60e51b8152600401610b7e90612df5565b5081610d8b565b610d8b8383815115611c115781518083602001fd5b8060405162461bcd60e51b8152600401610b7e9190611eae565b508054611c3790612149565b6000825580601f10611c47575050565b601f016020900490600052602060002090810190611c659190611c68565b50565b5b80821115611c7d5760008155600101611c69565b5090565b805b8114611c6557600080fd5b8035610aae81611c81565b600060208284031215611cae57611cae600080fd5b6000610d8b8484611c8e565b60005b83811015611cd5578181015183820152602001611cbd565b50506000910152565b6000611ce8825190565b808452602084019350611cff818560208601611cba565b601f01601f19169290920192915050565b67ffffffffffffffff81165b82525050565b801515611d1c565b611d1c8160070b90565b80611d1c565b8051608080845260009190840190611d528282611cde565b9150506020830151611d676020860182611d10565b506040830151611d7a6040860182611d22565b506060830151611d8d6060860182611d22565b509392505050565b805161016080845260009190840190611dae8282611cde565b9150506020830151611dc36020860182611d10565b506040830151611dd66040860182611d22565b5060608301518482036060860152611dee8282611cde565b9150506080830151611e036080860182611d2a565b5060a0830151611e1660a0860182611d2a565b5060c0830151611e2960c0860182611d34565b5060e0830151611e3c60e0860182611d34565b50610100830151611e51610100860182611d34565b50610120830151611e66610120860182611d10565b5061014083015184820361014086015261187b8282611d3a565b60408082528101611e918185611d95565b9050610b056020830184611d34565b60208101610aae8284611d34565b60208082528101610b058184611cde565b60006101608284031215611ed557611ed5600080fd5b50919050565b60008060408385031215611ef157611ef1600080fd5b823567ffffffffffffffff811115611f0b57611f0b600080fd5b611f1785828601611ebf565b9250506020611f2885828601611c8e565b9150509250929050565b60006001600160a01b038216610aae565b611c8381611f32565b8035610aae81611f43565b60008060408385031215611f6d57611f6d600080fd5b6000611f178585611f4c565b60208101610aae8284611d22565b6000610aae6001600160a01b038316611f9e565b90565b6001600160a01b031690565b6000610aae82611f87565b6000610aae82611faa565b611d1c81611fb5565b60208101610aae8284611fc0565b600080600060608486031215611fef57611fef600080fd5b6000611ffb8686611f4c565b935050602061200c86828701611f4c565b925050604061201d86828701611c8e565b9150509250925092565b60ff8116611d1c565b60208101610aae8284612027565b611d1c81611f32565b60208101610aae828461203e565b60006020828403121561206a5761206a600080fd5b6000610d8b8484611f4c565b6000806040838503121561208c5761208c600080fd5b60006120988585611c8e565b9250506020611f2885828601611f4c565b600080604083850312156120bf576120bf600080fd5b6000611f178585611c8e565b6000806000606084860312156120e3576120e3600080fd5b60006120ef8686611c8e565b935050602061210086828701611f4c565b925050604061201d86828701611f4c565b6000806040838503121561212757612127600080fd5b60006120988585611f4c565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061215d57607f821691505b602082108103611ed557611ed5612133565b8051610aae81611c81565b60006020828403121561218f5761218f600080fd5b6000610d8b848461216f565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156121d7576121d761219b565b6040525050565b60006121e960405190565b90506121f582826121b1565b919050565b600067ffffffffffffffff8211156122145761221461219b565b601f19601f83011660200192915050565b82818337506000910152565b600061224461223f846121fa565b6121de565b90508281526020810184848401111561225f5761225f600080fd5b611d8d848285612225565b600082601f83011261227e5761227e600080fd5b8135610d8b848260208601612231565b67ffffffffffffffff8116611c83565b8035610aae8161228e565b801515611c83565b8035610aae816122a9565b611c838160070b90565b8035610aae816122bc565b6000608082840312156122e6576122e6600080fd5b6122f060806121de565b9050813567ffffffffffffffff81111561230c5761230c600080fd5b6123188482850161226a565b82525060206123298484830161229e565b602083015250604061233d848285016122b1565b6040830152506060612351848285016122b1565b60608301525092915050565b6000610160828403121561237357612373600080fd5b61237e6101606121de565b9050813567ffffffffffffffff81111561239a5761239a600080fd5b6123a68482850161226a565b82525060206123b78484830161229e565b60208301525060406123cb848285016122b1565b604083015250606082013567ffffffffffffffff8111156123ee576123ee600080fd5b6123fa8482850161226a565b606083015250608061240e848285016122c6565b60808301525060a0612422848285016122c6565b60a08301525060c061243684828501611c8e565b60c08301525060e061244a84828501611c8e565b60e08301525061010061245f84828501611c8e565b610100830152506101206124758482850161229e565b6101208301525061014082013567ffffffffffffffff81111561249a5761249a600080fd5b6124a6848285016122d1565b6101408301525092915050565b6000610aae368361235d565b6000610aae611f9b8381565b6124d4836124bf565b81546008840282811b60001990911b908116901990911617825550505050565b60006118848184846124cb565b81811015611294576125146000826124f4565b600101612501565b601f821115611884576000818152602090206020601f850104810160208510156125435750805b6113da6020601f860104830182612501565b815167ffffffffffffffff81111561256f5761256f61219b565b6125798254612149565b61258482828561251c565b6020601f8311600181146125b857600084156125a05750858201515b600019600886021c1981166002860217865550612611565b600085815260208120601f198616915b828110156125e857888501518255602094850194600190920191016125c8565b868310156126045784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b634e487b7160e01b600052601160045260246000fd5b60ff918216919081169082820190811115610aae57610aae612619565b80820180821115610aae57610aae612619565b5060200190565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610aae81612666565b611d1c816124bf565b604081016126ea8285611d34565b610b0560208301846126d3565b60408101612705828561203e565b610b056020830184611d34565b601f81526000602082017f455243343632363a207769746864726177206d6f7265207468616e206d6178008152915061265f565b60208082528101610aae81612712565b601d81526000602082017f455243343632363a2072656465656d206d6f7265207468616e206d61780000008152915061265f565b60208082528101610aae81612756565b60208082528101610b058184611d95565b604081016127b98285611d34565b610b05602083018461203e565b606081016127d4828661203e565b6127e1602083018561203e565b610d8b6040830184611d34565b8051610aae816122a9565b60006020828403121561280e5761280e600080fd5b6000610d8b84846127ee565b80825b60018511156128595780860481111561283857612838612619565b600185161561284657908102905b80026128528560011c90565b945061281d565b94509492505050565b60008261287157506001610b05565b8161287e57506000610b05565b8160018114612894576002811461289e576128cb565b6001915050610b05565b60ff8411156128af576128af612619565b8360020a9150848211156128c5576128c5612619565b50610b05565b5060208310610133831016604e8410600b84101617156128fe575081810a838111156128f9576128f9612619565b610b05565b61290b848484600161281a565b9250905081840481111561292157612921612619565b0292915050565b600060ff83169250610b056000198484612862565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f7265737300000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae8161293d565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f7373000000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae816129a7565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000008152915061265f565b60208082528101610aae81612a11565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612a55565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612abf565b602681526000602082017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e63650000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612b29565b604081016127058285611d34565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f2061646472657373008152915061265f565b60208082528101610aae81612ba1565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f7300000000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612c11565b602281526000602082017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f6365000000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612c7b565b601581526000602082017f4d6174683a206d756c446976206f766572666c6f7700000000000000000000008152915061265f565b60208082528101610aae81612ce5565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612d29565b6000612d9d825190565b612dab818560208601611cba565b9290920192915050565b6000610b058284612d93565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152915061265f565b60208082528101610aae81612dc156fea2646970667358221220af44695a11efcc3cf4b16f5a0aff567d1c8f5d218b8779a2d4b8a3ad0c250ed264736f6c6343000811003360806040523480156200001157600080fd5b5060405180604001604052806004815260200163566f746560e01b8152506040518060400160405280600381526020016256544560e81b81525081600390816200005c9190620001fd565b5060046200006b8282620001fd565b50505062000088620000826200008e60201b60201c565b62000092565b620002cd565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200012557607f821691505b6020821081036200013a576200013a620000fa565b50919050565b6000620001516200014e8381565b90565b92915050565b620001628362000140565b81546008840282811b60001990911b908116901990911617825550505050565b60006200019181848462000157565b505050565b81811015620001b557620001ac60008262000182565b60010162000196565b5050565b601f82111562000191576000818152602090206020601f85010481016020851015620001e25750805b620001f66020601f86010483018262000196565b5050505050565b81516001600160401b03811115620002195762000219620000e4565b62000225825462000110565b62000232828285620001b9565b6020601f831160018114620002695760008415620002505750858201515b600019600886021c1981166002860217865550620002c5565b600085815260208120601f198616915b828110156200029b578885015182556020948501946001909201910162000279565b86831015620002b85784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b610f7880620002dd6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063a457c2d711610066578063a457c2d714610203578063a9059cbb14610216578063dd62ed3e14610229578063f2fde38b1461026257600080fd5b8063715018a6146101c75780638da5cb5b146101cf57806395d89b41146101e85780639dc29fac146101f057600080fd5b8063313ce567116100d3578063313ce56714610167578063395093511461017657806340c10f191461018957806370a082311461019e57600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014357806323b872dd14610154575b600080fd5b61010d610275565b60405161011a91906108b1565b60405180910390f35b61013661013136600461090a565b610307565b60405161011a9190610951565b6002545b60405161011a9190610965565b610136610162366004610973565b610321565b601260405161011a91906109cc565b61013661018436600461090a565b610345565b61019c61019736600461090a565b610384565b005b6101476101ac3660046109da565b6001600160a01b031660009081526020819052604090205490565b61019c61039a565b6005546001600160a01b031660405161011a9190610a0c565b61010d6103ae565b61019c6101fe36600461090a565b6103bd565b61013661021136600461090a565b6103cf565b61013661022436600461090a565b61042c565b610147610237366004610a1a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61019c6102703660046109da565b61043a565b60606003805461028490610a63565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610a63565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b5050505050905090565b600033610315818585610474565b60019150505b92915050565b60003361032f858285610528565b61033a85858561058a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610315908290869061037f908790610aa5565b610474565b61038c61067a565b61039682826106a4565b5050565b6103a261067a565b6103ac600061073a565b565b60606004805461028490610a63565b6103c561067a565b61039682826107a4565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561041f5760405162461bcd60e51b815260040161041690610b15565b60405180910390fd5b61033a8286868403610474565b60003361031581858561058a565b61044261067a565b6001600160a01b0381166104685760405162461bcd60e51b815260040161041690610b7f565b6104718161073a565b50565b6001600160a01b03831661049a5760405162461bcd60e51b815260040161041690610be9565b6001600160a01b0382166104c05760405162461bcd60e51b815260040161041690610c53565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061051b908590610965565b60405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461058457818110156105775760405162461bcd60e51b815260040161041690610c9a565b6105848484848403610474565b50505050565b6001600160a01b0383166105b05760405162461bcd60e51b815260040161041690610d04565b6001600160a01b0382166105d65760405162461bcd60e51b815260040161041690610d6e565b6001600160a01b0383166000908152602081905260409020548181101561060f5760405162461bcd60e51b815260040161041690610dd8565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061066d908690610965565b60405180910390a3610584565b6005546001600160a01b031633146103ac5760405162461bcd60e51b815260040161041690610e1a565b6001600160a01b0382166106ca5760405162461bcd60e51b815260040161041690610e5e565b80600260008282546106dc9190610aa5565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061072e908590610965565b60405180910390a35050565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166107ca5760405162461bcd60e51b815260040161041690610ec8565b6001600160a01b038216600090815260208190526040902054818110156108035760405162461bcd60e51b815260040161041690610f32565b6001600160a01b0383166000818152602081905260408082208585039055600280548690039055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061051b908690610965565b60005b8381101561087657818101518382015260200161085e565b50506000910152565b6000610889825190565b8084526020840193506108a081856020860161085b565b601f01601f19169290920192915050565b602080825281016108c2818461087f565b9392505050565b60006001600160a01b03821661031b565b6108e3816108c9565b811461047157600080fd5b803561031b816108da565b806108e3565b803561031b816108f9565b6000806040838503121561092057610920600080fd5b600061092c85856108ee565b925050602061093d858286016108ff565b9150509250929050565b8015155b82525050565b6020810161031b8284610947565b8061094b565b6020810161031b828461095f565b60008060006060848603121561098b5761098b600080fd5b600061099786866108ee565b93505060206109a8868287016108ee565b92505060406109b9868287016108ff565b9150509250925092565b60ff811661094b565b6020810161031b82846109c3565b6000602082840312156109ef576109ef600080fd5b60006109fb84846108ee565b949350505050565b61094b816108c9565b6020810161031b8284610a03565b60008060408385031215610a3057610a30600080fd5b6000610a3c85856108ee565b925050602061093d858286016108ee565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a7757607f821691505b602082108103610a8957610a89610a4d565b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561031b5761031b610a8f565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b6020808252810161031b81610ab8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610b25565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610b8f565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610bf9565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000815291505b5060200190565b6020808252810161031b81610c63565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610caa565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610d14565b602681526000602082017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610d7e565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610c93565b6020808252810161031b81610de8565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529150610c93565b6020808252810161031b81610e2a565b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610e6e565b602281526000602082017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529150610b0e565b6020808252810161031b81610ed856fea2646970667358221220b429442c37bfc5fb5d6d34db187f31960f403b4cd1b29dae2be48bdd7e03cb8864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c806394bf804d1161012a578063c63d75b6116100bd578063da35c6641161008c578063e210f4b511610071578063e210f4b5146104d8578063ef8b30f71461045d578063f14faf6f146104eb57600080fd5b8063da35c66414610496578063dd62ed3e1461049f57600080fd5b8063c63d75b61461037d578063c6e6f5921461045d578063ce96cb7714610470578063d905777e1461048357600080fd5b8063b384abef116100f9578063b384abef1461040f578063b3d7f6b914610424578063b460af9414610437578063ba0876521461044a57600080fd5b806394bf804d146103ce57806395d89b41146103e1578063a457c2d7146103e9578063a9059cbb146103fc57600080fd5b806318160ddd116101bd578063395093511161018c5780634cdad506116101715780634cdad506146102925780636e553f651461039257806370a08231146103a557600080fd5b8063395093511461036a578063402d267d1461037d57600080fd5b806318160ddd1461030c57806323b872dd14610314578063313ce5671461032757806338d52e0f1461033c57600080fd5b806307a2d13a116101f957806307a2d13a14610292578063095ea7b3146102a55780630a28a477146102c5578063160d66ae146102d857600080fd5b8063013cf08b1461022b57806301e1d1141461025557806306fdde031461026a578063074a46a21461027f575b600080fd5b61023e610239366004611c99565b6104fe565b60405161024c929190611e80565b60405180910390f35b61025d6107b3565b60405161024c9190611ea0565b610272610861565b60405161024c9190611eae565b61025d61028d366004611edb565b6108f3565b61025d6102a0366004611c99565b610ab4565b6102b86102b3366004611f57565b610ac1565b60405161024c9190611f79565b61025d6102d3366004611c99565b610ad9565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405161024c9190611fc9565b60025461025d565b6102b8610322366004611fd7565b610ae6565b61032f610b0c565b60405161024c9190612030565b7f000000000000000000000000000000000000000000000000000000000000000060405161024c9190612047565b6102b8610378366004611f57565b610b38565b61025d61038b366004612055565b5060001990565b61025d6103a0366004612076565b610b77565b61025d6103b3366004612055565b6001600160a01b031660009081526020819052604090205490565b61025d6103dc366004612076565b610ba0565b610272610bba565b6102b86103f7366004611f57565b610bc9565b6102b861040a366004611f57565b610c28565b61042261041d3660046120a9565b610c36565b005b61025d610432366004611c99565b610d3a565b61025d6104453660046120cb565b610d47565b61025d6104583660046120cb565b610d93565b61025d61046b366004611c99565b610dd7565b61025d61047e366004612055565b610de4565b61025d610491366004612055565b610e08565b61025d60055481565b61025d6104ad366004612111565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104226104e6366004611c99565b610e26565b6104226104f9366004611c99565b611298565b6006602052806000526040600020600091509050806000016040518061016001604052908160008201805461053290612149565b80601f016020809104026020016040519081016040528092919081815260200182805461055e90612149565b80156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b5050509183525050600182015467ffffffffffffffff81166020830152600160401b900460ff16151560408201526002820180546060909201916105ee90612149565b80601f016020809104026020016040519081016040528092919081815260200182805461061a90612149565b80156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b50505091835250506003820154600781810b6020840152600160401b909104810b604080840191909152600484015460608401526005840154608080850191909152600685015460a08501529184015467ffffffffffffffff1660c08401528051918201905260088301805460e090930192829082906106e690612149565b80601f016020809104026020016040519081016040528092919081815260200182805461071290612149565b801561075f5780601f106107345761010080835404028352916020019161075f565b820191906000526020600020905b81548152906001019060200180831161074257829003601f168201915b50505091835250506001919091015467ffffffffffffffff8116602083015260ff600160401b82048116151560408401526901000000000000000000909104161515606090910152905250600a9091015482565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061081b903090600401612047565b602060405180830381865afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c919061217a565b905090565b60606003805461087090612149565b80601f016020809104026020016040519081016040528092919081815260200182805461089c90612149565b80156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b5050505050905090565b60058054600101908190556040805180820190915280610912856124b3565b815260006020918201819052838152600690915260409020815180518290819061093c9082612555565b50602082015160018201805460408501511515600160401b0268ffffffffffffffffff1990911667ffffffffffffffff909316929092179190911790556060820151600282019061098d9082612555565b50608082015160038201805460a085015167ffffffffffffffff908116600160401b026fffffffffffffffffffffffffffffffff199092169381169390931717905560c0830151600483015560e0830151600583015561010083015160068301556101208301516007830180549190921667ffffffffffffffff1991909116179055610140820151805160088301908190610a289082612555565b50602082810151600190920180546040850151606090950151151569010000000000000000000269ff00000000000000000019951515600160401b0268ffffffffffffffffff1990921667ffffffffffffffff909516949094171793909316919091179091559390930151600a9092019190915550508115610aae57610aae8183610c36565b92915050565b6000610aae8260006113e1565b600033610acf81858561141b565b5060019392505050565b6000610aae8260016114cf565b600033610af48582856114ff565b610aff858585611561565b60019150505b9392505050565b600061085c817f000000000000000000000000000000000000000000000000000000000000000061262f565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610acf9082908690610b7290879061264c565b61141b565b6000610b87565b60405180910390fd5b6000610b9284610dd7565b9050610b0533848684611651565b600080610bac84610d3a565b9050610b0533848387611651565b60606004805461087090612149565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610c105760405162461bcd60e51b8152600401610b7e906126c3565b610c1d828686840361141b565b506001949350505050565b600033610acf818585611561565b80600003610c75578160006040517fb8420057000000000000000000000000000000000000000000000000000000008152600401610b7e9291906126dc565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90610cdc90339085906004016126f7565b600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b5050506000838152600660205260408120600a018054849350909190610d3190849061264c565b90915550505050565b6000610aae8260016113e1565b6000610d5282610de4565b841115610d715760405162461bcd60e51b8152600401610b7e90612746565b6000610d7c85610ad9565b9050610d8b33858588856116da565b949350505050565b6000610d9e82610e08565b841115610dbd5760405162461bcd60e51b8152600401610b7e9061278a565b6000610dc885610ab4565b9050610d8b33858584896116da565b6000610aae8260006114cf565b6001600160a01b038116600090815260208190526040812054610aae9060006113e1565b6001600160a01b038116600090815260208190526040812054610aae565b60008181526006602052604080822081516101a08101835281549092839190820190839082908290610e5790612149565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8390612149565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b5050509183525050600182015467ffffffffffffffff81166020830152600160401b900460ff1615156040820152600282018054606090920191610f1390612149565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3f90612149565b8015610f8c5780601f10610f6157610100808354040283529160200191610f8c565b820191906000526020600020905b815481529060010190602001808311610f6f57829003601f168201915b50505091835250506003820154600781810b6020840152600160401b909104810b604080840191909152600484015460608401526005840154608080850191909152600685015460a08501529184015467ffffffffffffffff1660c08401528051918201905260088301805460e0909301928290829061100b90612149565b80601f016020809104026020016040519081016040528092919081815260200182805461103790612149565b80156110845780601f1061105957610100808354040283529160200191611084565b820191906000526020600020905b81548152906001019060200180831161106757829003601f168201915b50505091835250506001919091015467ffffffffffffffff811660208084019190915260ff600160401b830481161515604080860191909152690100000000000000000090930416151560609093019290925291909252928452600a949094015492840192909252600086815260069093528220929350829050816111098282611c2b565b60018201805468ffffffffffffffffff1916905561112b600283016000611c2b565b6003820180546fffffffffffffffffffffffffffffffff19169055600060048301819055600583018190556006830181905560078301805467ffffffffffffffff19169055600883019061117f8282611c2b565b50600101805469ffffffffffffffffffff1916905550506000600a92909201919091555080516040517fdd27fe900000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163dd27fe9091611209919060040161279a565b6020604051808303816000875af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c919061217a565b507f11641d364e926d2bf231c2d36f2a9271390042d717ea334a3e7c983c27a12391823360405161127e9291906127ab565b60405180910390a1611294338260200151611791565b5050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90611301903390309086906004016127c6565b6020604051808303816000875af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134491906127f9565b506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906113ac90339085906004016126f7565b600060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b5050505050565b6000610b056113ee6107b3565b6113f990600161264c565b6114056000600a612928565b600254611412919061264c565b85919085611827565b6001600160a01b0383166114415760405162461bcd60e51b8152600401610b7e90612997565b6001600160a01b0382166114675760405162461bcd60e51b8152600401610b7e90612a01565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906114c2908590611ea0565b60405180910390a3505050565b6000610b056114df82600a612928565b6002546114ec919061264c565b6114f46107b3565b61141290600161264c565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461155b578181101561154e5760405162461bcd60e51b8152600401610b7e90612a45565b61155b848484840361141b565b50505050565b6001600160a01b0383166115875760405162461bcd60e51b8152600401610b7e90612aaf565b6001600160a01b0382166115ad5760405162461bcd60e51b8152600401610b7e90612b19565b6001600160a01b038316600090815260208190526040902054818110156115e65760405162461bcd60e51b8152600401610b7e90612b83565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611644908690611ea0565b60405180910390a361155b565b61167d7f0000000000000000000000000000000000000000000000000000000000000000853085611889565b6116878382611791565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516116cc929190612b93565b60405180910390a350505050565b826001600160a01b0316856001600160a01b0316146116fe576116fe8386836114ff565b611708838261190e565b6117337f000000000000000000000000000000000000000000000000000000000000000085846119c5565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051611782929190612b93565b60405180910390a45050505050565b6001600160a01b0382166117b75760405162461bcd60e51b8152600401610b7e90612bd5565b80600260008282546117c9919061264c565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061181b908590611ea0565b60405180910390a35050565b6000806118358686866119e4565b9050600183600281111561184b5761184b612be5565b14801561186857506000848061186357611863612bfb565b868809115b1561187b5761187860018261264c565b90505b95945050505050565b505050565b61155b846323b872dd60e01b8585856040516024016118aa939291906127c6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611aa6565b6001600160a01b0382166119345760405162461bcd60e51b8152600401610b7e90612c6b565b6001600160a01b0382166000908152602081905260409020548181101561196d5760405162461bcd60e51b8152600401610b7e90612cd5565b6001600160a01b0383166000818152602081905260408082208585039055600280548690039055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114c2908690611ea0565b6118848363a9059cbb60e01b84846040516024016118aa9291906126f7565b6000808060001985870985870292508281108382030391505080600003611a1e57838281611a1457611a14612bfb565b0492505050610b05565b808411611a3d5760405162461bcd60e51b8152600401610b7e90612d19565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611afb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b389092919063ffffffff16565b9050805160001480611b1c575080806020019051810190611b1c91906127f9565b6118845760405162461bcd60e51b8152600401610b7e90612d83565b6060610d8b848460008585600080866001600160a01b03168587604051611b5f9190612db5565b60006040518083038185875af1925050503d8060008114611b9c576040519150601f19603f3d011682016040523d82523d6000602084013e611ba1565b606091505b5091509150611bb287838387611bbd565b979650505050505050565b60608315611bfc578251600003611bf5576001600160a01b0385163b611bf55760405162461bcd60e51b8152600401610b7e90612df5565b5081610d8b565b610d8b8383815115611c115781518083602001fd5b8060405162461bcd60e51b8152600401610b7e9190611eae565b508054611c3790612149565b6000825580601f10611c47575050565b601f016020900490600052602060002090810190611c659190611c68565b50565b5b80821115611c7d5760008155600101611c69565b5090565b805b8114611c6557600080fd5b8035610aae81611c81565b600060208284031215611cae57611cae600080fd5b6000610d8b8484611c8e565b60005b83811015611cd5578181015183820152602001611cbd565b50506000910152565b6000611ce8825190565b808452602084019350611cff818560208601611cba565b601f01601f19169290920192915050565b67ffffffffffffffff81165b82525050565b801515611d1c565b611d1c8160070b90565b80611d1c565b8051608080845260009190840190611d528282611cde565b9150506020830151611d676020860182611d10565b506040830151611d7a6040860182611d22565b506060830151611d8d6060860182611d22565b509392505050565b805161016080845260009190840190611dae8282611cde565b9150506020830151611dc36020860182611d10565b506040830151611dd66040860182611d22565b5060608301518482036060860152611dee8282611cde565b9150506080830151611e036080860182611d2a565b5060a0830151611e1660a0860182611d2a565b5060c0830151611e2960c0860182611d34565b5060e0830151611e3c60e0860182611d34565b50610100830151611e51610100860182611d34565b50610120830151611e66610120860182611d10565b5061014083015184820361014086015261187b8282611d3a565b60408082528101611e918185611d95565b9050610b056020830184611d34565b60208101610aae8284611d34565b60208082528101610b058184611cde565b60006101608284031215611ed557611ed5600080fd5b50919050565b60008060408385031215611ef157611ef1600080fd5b823567ffffffffffffffff811115611f0b57611f0b600080fd5b611f1785828601611ebf565b9250506020611f2885828601611c8e565b9150509250929050565b60006001600160a01b038216610aae565b611c8381611f32565b8035610aae81611f43565b60008060408385031215611f6d57611f6d600080fd5b6000611f178585611f4c565b60208101610aae8284611d22565b6000610aae6001600160a01b038316611f9e565b90565b6001600160a01b031690565b6000610aae82611f87565b6000610aae82611faa565b611d1c81611fb5565b60208101610aae8284611fc0565b600080600060608486031215611fef57611fef600080fd5b6000611ffb8686611f4c565b935050602061200c86828701611f4c565b925050604061201d86828701611c8e565b9150509250925092565b60ff8116611d1c565b60208101610aae8284612027565b611d1c81611f32565b60208101610aae828461203e565b60006020828403121561206a5761206a600080fd5b6000610d8b8484611f4c565b6000806040838503121561208c5761208c600080fd5b60006120988585611c8e565b9250506020611f2885828601611f4c565b600080604083850312156120bf576120bf600080fd5b6000611f178585611c8e565b6000806000606084860312156120e3576120e3600080fd5b60006120ef8686611c8e565b935050602061210086828701611f4c565b925050604061201d86828701611f4c565b6000806040838503121561212757612127600080fd5b60006120988585611f4c565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061215d57607f821691505b602082108103611ed557611ed5612133565b8051610aae81611c81565b60006020828403121561218f5761218f600080fd5b6000610d8b848461216f565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156121d7576121d761219b565b6040525050565b60006121e960405190565b90506121f582826121b1565b919050565b600067ffffffffffffffff8211156122145761221461219b565b601f19601f83011660200192915050565b82818337506000910152565b600061224461223f846121fa565b6121de565b90508281526020810184848401111561225f5761225f600080fd5b611d8d848285612225565b600082601f83011261227e5761227e600080fd5b8135610d8b848260208601612231565b67ffffffffffffffff8116611c83565b8035610aae8161228e565b801515611c83565b8035610aae816122a9565b611c838160070b90565b8035610aae816122bc565b6000608082840312156122e6576122e6600080fd5b6122f060806121de565b9050813567ffffffffffffffff81111561230c5761230c600080fd5b6123188482850161226a565b82525060206123298484830161229e565b602083015250604061233d848285016122b1565b6040830152506060612351848285016122b1565b60608301525092915050565b6000610160828403121561237357612373600080fd5b61237e6101606121de565b9050813567ffffffffffffffff81111561239a5761239a600080fd5b6123a68482850161226a565b82525060206123b78484830161229e565b60208301525060406123cb848285016122b1565b604083015250606082013567ffffffffffffffff8111156123ee576123ee600080fd5b6123fa8482850161226a565b606083015250608061240e848285016122c6565b60808301525060a0612422848285016122c6565b60a08301525060c061243684828501611c8e565b60c08301525060e061244a84828501611c8e565b60e08301525061010061245f84828501611c8e565b610100830152506101206124758482850161229e565b6101208301525061014082013567ffffffffffffffff81111561249a5761249a600080fd5b6124a6848285016122d1565b6101408301525092915050565b6000610aae368361235d565b6000610aae611f9b8381565b6124d4836124bf565b81546008840282811b60001990911b908116901990911617825550505050565b60006118848184846124cb565b81811015611294576125146000826124f4565b600101612501565b601f821115611884576000818152602090206020601f850104810160208510156125435750805b6113da6020601f860104830182612501565b815167ffffffffffffffff81111561256f5761256f61219b565b6125798254612149565b61258482828561251c565b6020601f8311600181146125b857600084156125a05750858201515b600019600886021c1981166002860217865550612611565b600085815260208120601f198616915b828110156125e857888501518255602094850194600190920191016125c8565b868310156126045784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b634e487b7160e01b600052601160045260246000fd5b60ff918216919081169082820190811115610aae57610aae612619565b80820180821115610aae57610aae612619565b5060200190565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610aae81612666565b611d1c816124bf565b604081016126ea8285611d34565b610b0560208301846126d3565b60408101612705828561203e565b610b056020830184611d34565b601f81526000602082017f455243343632363a207769746864726177206d6f7265207468616e206d6178008152915061265f565b60208082528101610aae81612712565b601d81526000602082017f455243343632363a2072656465656d206d6f7265207468616e206d61780000008152915061265f565b60208082528101610aae81612756565b60208082528101610b058184611d95565b604081016127b98285611d34565b610b05602083018461203e565b606081016127d4828661203e565b6127e1602083018561203e565b610d8b6040830184611d34565b8051610aae816122a9565b60006020828403121561280e5761280e600080fd5b6000610d8b84846127ee565b80825b60018511156128595780860481111561283857612838612619565b600185161561284657908102905b80026128528560011c90565b945061281d565b94509492505050565b60008261287157506001610b05565b8161287e57506000610b05565b8160018114612894576002811461289e576128cb565b6001915050610b05565b60ff8411156128af576128af612619565b8360020a9150848211156128c5576128c5612619565b50610b05565b5060208310610133831016604e8410600b84101617156128fe575081810a838111156128f9576128f9612619565b610b05565b61290b848484600161281a565b9250905081840481111561292157612921612619565b0292915050565b600060ff83169250610b056000198484612862565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f7265737300000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae8161293d565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f7373000000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae816129a7565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000008152915061265f565b60208082528101610aae81612a11565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612a55565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612abf565b602681526000602082017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e63650000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612b29565b604081016127058285611d34565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f2061646472657373008152915061265f565b60208082528101610aae81612ba1565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f7300000000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612c11565b602281526000602082017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f6365000000000000000000000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612c7b565b601581526000602082017f4d6174683a206d756c446976206f766572666c6f7700000000000000000000008152915061265f565b60208082528101610aae81612ce5565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015291506126bc565b60208082528101610aae81612d29565b6000612d9d825190565b612dab818560208601611cba565b9290920192915050565b6000610b058284612d93565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152915061265f565b60208082528101610aae81612dc156fea2646970667358221220af44695a11efcc3cf4b16f5a0aff567d1c8f5d218b8779a2d4b8a3ad0c250ed264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decimals()": {
        "details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "See {IERC4626-deposit}. "
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxDeposit(address)": {
        "details": "See {IERC4626-maxDeposit}. "
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}. "
      },
      "maxRedeem(address)": {
        "details": "See {IERC4626-maxRedeem}. "
      },
      "maxWithdraw(address)": {
        "details": "See {IERC4626-maxWithdraw}. "
      },
      "mint(uint256,address)": {
        "details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}. "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}. "
      },
      "redeem(uint256,address,address)": {
        "details": "See {IERC4626-redeem}. "
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "See {IERC4626-totalAssets}. "
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "withdraw(uint256,address,address)": {
        "details": "See {IERC4626-withdraw}. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 296,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 302,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 304,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 306,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 308,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3254,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposalCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3259,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Proposal)3454_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)3454_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)3454_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DealRequest)3523_storage": {
        "encoding": "inplace",
        "label": "struct DealRequest",
        "members": [
          {
            "astId": 3501,
            "contract": "contracts/DAO.sol:DAO",
            "label": "piece_cid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3503,
            "contract": "contracts/DAO.sol:DAO",
            "label": "piece_size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3505,
            "contract": "contracts/DAO.sol:DAO",
            "label": "verified_deal",
            "offset": 8,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3507,
            "contract": "contracts/DAO.sol:DAO",
            "label": "label",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3509,
            "contract": "contracts/DAO.sol:DAO",
            "label": "start_epoch",
            "offset": 0,
            "slot": "3",
            "type": "t_int64"
          },
          {
            "astId": 3511,
            "contract": "contracts/DAO.sol:DAO",
            "label": "end_epoch",
            "offset": 8,
            "slot": "3",
            "type": "t_int64"
          },
          {
            "astId": 3513,
            "contract": "contracts/DAO.sol:DAO",
            "label": "storage_price_per_epoch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3515,
            "contract": "contracts/DAO.sol:DAO",
            "label": "provider_collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3517,
            "contract": "contracts/DAO.sol:DAO",
            "label": "client_collateral",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3519,
            "contract": "contracts/DAO.sol:DAO",
            "label": "extra_params_version",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 3522,
            "contract": "contracts/DAO.sol:DAO",
            "label": "extra_params",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(ExtraParamsV1)3532_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(ExtraParamsV1)3532_storage": {
        "encoding": "inplace",
        "label": "struct ExtraParamsV1",
        "members": [
          {
            "astId": 3525,
            "contract": "contracts/DAO.sol:DAO",
            "label": "location_ref",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3527,
            "contract": "contracts/DAO.sol:DAO",
            "label": "car_size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3529,
            "contract": "contracts/DAO.sol:DAO",
            "label": "skip_ipni_announce",
            "offset": 8,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3531,
            "contract": "contracts/DAO.sol:DAO",
            "label": "remove_unsealed_copy",
            "offset": 9,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Proposal)3454_storage": {
        "encoding": "inplace",
        "label": "struct IDAO.Proposal",
        "members": [
          {
            "astId": 3451,
            "contract": "contracts/DAO.sol:DAO",
            "label": "dealRequest",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(DealRequest)3523_storage"
          },
          {
            "astId": 3453,
            "contract": "contracts/DAO.sol:DAO",
            "label": "votes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}